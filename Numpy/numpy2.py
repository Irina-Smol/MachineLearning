import numpy as np

a = np.array([1, 2, 3, 4]) # Будет сформирован одномерный массив целых чисел
a = np.array([1, 2, 3, 4], 'float64')  # явно нужно указать тип элементов массива, можно записать вторым аргументом
# В результате все величины будут вещественными 64-битными числами

# типы данных, которые поддерживает пакет NumPy
print(np.sctypeDict)

# можно выполнять преобразование типов
a = np.array([1, 2, 3, 4], 'uintc')
a = np.array([1, 2, 3, 4], 'str_')

np.complex64(10)
np.int16(10.5)

a = np.array([1, 2, 5000, 1000], dtype='int8')
# >>> array([   1,    2, -120,  -24], dtype=int8)
# значения 5000 и 1000 не умещаются в однобайтовое целое число, поэтому видим значения -120 и -24

# Если требуется поменять тип данных в уже созданном массиве, то опять же можно воспользоваться объектами типов
a = np.array([1, 2, 5000, 1000])
b = np.complex64(a)
c = np.int32(b) # мнимая информация о числе будет утеряна

# Создание массивов с помощью функции array
np.array( (1, 2, 3) )


def getList():
    for i in range(10):
        yield i

a = np.array([x for x in getList()])
print(a)

# Объявление многомерных массивов
a = np.array([[1, 2], [3, 4], [5, 6]])
# >>>array([[1, 2],
#        [3, 4],
#       [5, 6]])

b = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]])
# array([[[ 1,  2],
# [ 3,  4]],
# [[ 5,  6],
# [ 7,  8]],
# [[ 9, 10],
# [11, 12]]])

print(b[0]) # >>> увидим первый двумерный срез трехмерного массива [[1, 2],
                                                         #         [3, 4]]
print(b[0, 0]) #  увидим первую строку первого среза [1, 2]
print(b[0, 0, 0]) # получим первый элемент трехмерной матрицы: 1
