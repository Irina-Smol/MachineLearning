import numpy as np

# Транслирование массивов

a = np.array([1, 2, 3, 10, 20, 30])
b = np.array([2])

print(a*b) # array([ 2,  4,  6, 20, 40, 60])
print(a+b) # array([ 3,  4,  5, 12, 22, 32])

# алгоритмы транслирования массивов пакета NumPy, который следует двум правилам:

# 1. Если массивы имеют разное число осей (размерностей), то к массиву с меньшим их числом добавляются новые так,
#            чтобы размерности совпадали. (Причем, добавление всегда происходит с оси axis0).
# 2. Оси с одним элементом расширяются (по числу элементов) так, чтобы соответствующие размерности двух массивов совпадали.

a = np.arange(1, 10).reshape(3,3)
b = np.array([4, 5, 6])
print(a+b) # array([[ 5,  7,  9],   [ 8, 10, 12],   [11, 13, 15]])

# a: 3 x 3
# b: 1 x 3

a = np.arange(6).reshape(3, 1, 2)
b = np.ones(4).reshape(2, 2)

print(a * b) # массив размерностью (3, 2, 2)

# по первому правилу размерность массива b была доведена до размерности массива a
# a:  3  x 1 x 2
# b: (1) x 2 x 2

# по второму правилу все оси с одним элементом были расширены до нужного числа элементов.
# В итоге, были сформированы два массива размерностями:
# # a:  3  x (2) x 2
# # b: (3) x  2  x 2

# Функция ix_()

a = np.array([1, 2, 3])
b = np.array([4, 5])
c = np.array([7, 8, 9, 10])

a.shape = 1, 1, -1
b.shape = 1, -1, 1
c.shape = -1, 1, 1

print(a * b + c) # массив 4x2x3

a = np.array([1, 2, 3])
b = np.array([4, 5])
c = np.array([7, 8, 9, 10])
an, bn, cn = np.ix_(a, b, c)
print(an * bn + cn) # массив 3x2x4