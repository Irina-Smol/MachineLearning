import numpy as np

np.array( [0]*10 )  # массив из 10 нулей
np.array( [1]*15 )  # массив из 15 единиц
np.array( [x for x in range(10)] ) # массив из чисел от 0  до 9

# Функции автозаполнения элементов массива
np.empty(10) # создание одномерного массива с произвольными числами
np.empty(10, dtype='int16')
np.empty((3, 2), dtype='float32') # возвращаетматрицу 3x2 с типом float32

# eye - по главной диагонали единицы
np.eye(4)    # матрица 4х4
np.eye(4, 2)         # матрица 4x2
np.identity(5) # квадратная матрица 5x5

np.zeros( (2, 3, 4) ) # нулевая матрица размерностью 2x3x4
np.ones( [4, 3], dtype='int8') # матрица 4x3 из единиц и типом int8
np.full((3, 2), -1) # матрица 3x2, состоящая из -1

# Функции создания матриц
np.mat('1 2 3 4') # создает матрицу 1x4 из строки
np.mat('1, 2, 3, 4') # то же самое: создает матрицу 1x4 из строки
np.mat('1 2; 3 4') # возвращает матрицу 2x2

np.mat([5, 4, 3])
np.mat( [(1, 2, 3), (4, 5, 6)])

np.mat( [(1, 2, 3), (4, 5, 6, 7)])# ошибка, размерности не совпадают

np.diag([1, 2, 3]) # диагональная матрица 3x3

np.diag([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) # выделение элементов главной диагонали

np.diagflat([(1, 2, 3), (4, 5, 6), (7, 8, 9)])

np.tri(4) # треугольная матрица 4x4
np.tri(4, 2) # треугольная матрица 4x2

a = np.array( [(1,2,3), (4,5,6), (7,8,9)] )
np.tril(a) # нижняя треугольная матрица размером 3x3
np.triu(a) # верхняя треугольная матрица размером 3x3

np.tril([1, 2, 3])

np.tril([[[1,2,3], [4,5,6], [7,8,9]]])
np.tril([[[1,2,3], [4,5,6], [7,8,9]], [[10,20,30], [40,50,60], [70,80,90]], [[100,200,300], [400,500,600], [700,800,900]]])

np.vander([1,2,3]) # матрица Вандермонда 3x3

# Функции формирования числовых диапазонов
np.arange(5)# интервал [0; 5) с шагом 1
np.arange(1, 5)# интервал [1; 5) с шагом 1
np.arange(1, 5, 0.5) # интервал [1; 5) с шагом 0,5

np.arange(0, np.pi, 0.1) # работа с вещественными данными

np.cos(np.arange(0, np.pi, 0.1))

np.linspace(0, np.pi, 0) # пустой массив
np.linspace(0, np.pi, 1) # одно значение 0
np.linspace(0, np.pi, 2) # два значения: 0 и pi
np.linspace(0, np.pi, 3) # три значения: 0, pi/2, pi

np.logspace(0, 1, 3)  # значения: 1, sqrt(10), 10
np.logspace(0, 1, 4)  # значения: 1, 2.15, 4.64, 10

np.geomspace(1, 4, 3)  # значения: 1, 2, 4
np.geomspace(1, 16, 5)  # значения: 1, 2, 4, 8, 16

# Функции формирования массивов на основе данных
a = np.array( [(1, 2), (3, 4)] )
b = np.copy(a)
print(id(a), id(b))


def getRange(x, y):
    return 100 * x + y

a = np.fromfunction(getRange, (2, 2))
print(a)
# >>>[[  0.   1.]
# [100. 101.]]

np.fromfunction(lambda x, y: x*100+y, (2, 2))
# >>>[[  0.   1.]
# [100. 101.]]

np.fromiter("hello", dtype='U1') # fromiter позволяет формировать массив на основе любого итерируемого объекта

# Здесь в качестве объекта передается функция-генератор и на выходе получаем одномерный массив чисел:
# [0 1 2 3]:
def getRange(N):
    for i in range(N):
        yield i

a = np.fromiter(getRange(4), dtype='int8')
print(a)


np.fromstring('1 2 3', dtype='int16', sep= ' ') # fromstring позволяет создавать массив из строковых данных
np.fromstring('1, 2, 3', dtype='int16', sep= ',')